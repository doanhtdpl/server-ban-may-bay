/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package sns.core.scriber_log;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SimpleLogService {

  public interface Iface extends SimpleLogServiceR.Iface {

    public void log(String aLog) throws TException;

    public void multiLog(List<String> aLog) throws TException;

    public void logOneway(String aLog) throws TException;

    public void multiLogOneway(List<String> aLog) throws TException;

    public void log2(String category, String aLog) throws TException;

    public void logOneway2(String category, String aLog) throws TException;

  }

  public interface AsyncIface extends SimpleLogServiceR .AsyncIface {

    public void log(String aLog, AsyncMethodCallback<AsyncClient.log_call> resultHandler) throws TException;

    public void multiLog(List<String> aLog, AsyncMethodCallback<AsyncClient.multiLog_call> resultHandler) throws TException;

    public void logOneway(String aLog, AsyncMethodCallback<AsyncClient.logOneway_call> resultHandler) throws TException;

    public void multiLogOneway(List<String> aLog, AsyncMethodCallback<AsyncClient.multiLogOneway_call> resultHandler) throws TException;

    public void log2(String category, String aLog, AsyncMethodCallback<AsyncClient.log2_call> resultHandler) throws TException;

    public void logOneway2(String category, String aLog, AsyncMethodCallback<AsyncClient.logOneway2_call> resultHandler) throws TException;

  }

  public static class Client extends SimpleLogServiceR.Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      super(iprot, oprot);
    }

    public void log(String aLog) throws TException
    {
      send_log(aLog);
      recv_log();
    }

    public void send_log(String aLog) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("log", TMessageType.CALL, ++seqid_));
      log_args args = new log_args();
      args.setALog(aLog);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_log() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "log failed: out of sequence response");
      }
      log_result result = new log_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public void multiLog(List<String> aLog) throws TException
    {
      send_multiLog(aLog);
      recv_multiLog();
    }

    public void send_multiLog(List<String> aLog) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("multiLog", TMessageType.CALL, ++seqid_));
      multiLog_args args = new multiLog_args();
      args.setALog(aLog);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_multiLog() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "multiLog failed: out of sequence response");
      }
      multiLog_result result = new multiLog_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public void logOneway(String aLog) throws TException
    {
      send_logOneway(aLog);
    }

    public void send_logOneway(String aLog) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("logOneway", TMessageType.CALL, ++seqid_));
      logOneway_args args = new logOneway_args();
      args.setALog(aLog);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void multiLogOneway(List<String> aLog) throws TException
    {
      send_multiLogOneway(aLog);
    }

    public void send_multiLogOneway(List<String> aLog) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("multiLogOneway", TMessageType.CALL, ++seqid_));
      multiLogOneway_args args = new multiLogOneway_args();
      args.setALog(aLog);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void log2(String category, String aLog) throws TException
    {
      send_log2(category, aLog);
      recv_log2();
    }

    public void send_log2(String category, String aLog) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("log2", TMessageType.CALL, ++seqid_));
      log2_args args = new log2_args();
      args.setCategory(category);
      args.setALog(aLog);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_log2() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "log2 failed: out of sequence response");
      }
      log2_result result = new log2_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public void logOneway2(String category, String aLog) throws TException
    {
      send_logOneway2(category, aLog);
    }

    public void send_logOneway2(String category, String aLog) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("logOneway2", TMessageType.CALL, ++seqid_));
      logOneway2_args args = new logOneway2_args();
      args.setCategory(category);
      args.setALog(aLog);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

  }
  public static class AsyncClient extends SimpleLogServiceR.AsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void log(String aLog, AsyncMethodCallback<log_call> resultHandler) throws TException {
      checkReady();
      log_call method_call = new log_call(aLog, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class log_call extends TAsyncMethodCall {
      private String aLog;
      public log_call(String aLog, AsyncMethodCallback<log_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.aLog = aLog;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("log", TMessageType.CALL, 0));
        log_args args = new log_args();
        args.setALog(aLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_log();
      }
    }

    public void multiLog(List<String> aLog, AsyncMethodCallback<multiLog_call> resultHandler) throws TException {
      checkReady();
      multiLog_call method_call = new multiLog_call(aLog, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class multiLog_call extends TAsyncMethodCall {
      private List<String> aLog;
      public multiLog_call(List<String> aLog, AsyncMethodCallback<multiLog_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.aLog = aLog;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("multiLog", TMessageType.CALL, 0));
        multiLog_args args = new multiLog_args();
        args.setALog(aLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_multiLog();
      }
    }

    public void logOneway(String aLog, AsyncMethodCallback<logOneway_call> resultHandler) throws TException {
      checkReady();
      logOneway_call method_call = new logOneway_call(aLog, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class logOneway_call extends TAsyncMethodCall {
      private String aLog;
      public logOneway_call(String aLog, AsyncMethodCallback<logOneway_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.aLog = aLog;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("logOneway", TMessageType.CALL, 0));
        logOneway_args args = new logOneway_args();
        args.setALog(aLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void multiLogOneway(List<String> aLog, AsyncMethodCallback<multiLogOneway_call> resultHandler) throws TException {
      checkReady();
      multiLogOneway_call method_call = new multiLogOneway_call(aLog, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class multiLogOneway_call extends TAsyncMethodCall {
      private List<String> aLog;
      public multiLogOneway_call(List<String> aLog, AsyncMethodCallback<multiLogOneway_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.aLog = aLog;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("multiLogOneway", TMessageType.CALL, 0));
        multiLogOneway_args args = new multiLogOneway_args();
        args.setALog(aLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void log2(String category, String aLog, AsyncMethodCallback<log2_call> resultHandler) throws TException {
      checkReady();
      log2_call method_call = new log2_call(category, aLog, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class log2_call extends TAsyncMethodCall {
      private String category;
      private String aLog;
      public log2_call(String category, String aLog, AsyncMethodCallback<log2_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.category = category;
        this.aLog = aLog;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("log2", TMessageType.CALL, 0));
        log2_args args = new log2_args();
        args.setCategory(category);
        args.setALog(aLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_log2();
      }
    }

    public void logOneway2(String category, String aLog, AsyncMethodCallback<logOneway2_call> resultHandler) throws TException {
      checkReady();
      logOneway2_call method_call = new logOneway2_call(category, aLog, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class logOneway2_call extends TAsyncMethodCall {
      private String category;
      private String aLog;
      public logOneway2_call(String category, String aLog, AsyncMethodCallback<logOneway2_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.category = category;
        this.aLog = aLog;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("logOneway2", TMessageType.CALL, 0));
        logOneway2_args args = new logOneway2_args();
        args.setCategory(category);
        args.setALog(aLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor extends SimpleLogServiceR.Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      super(iface);
      iface_ = iface;
      processMap_.put("log", new log());
      processMap_.put("multiLog", new multiLog());
      processMap_.put("logOneway", new logOneway());
      processMap_.put("multiLogOneway", new multiLogOneway());
      processMap_.put("log2", new log2());
      processMap_.put("logOneway2", new logOneway2());
    }

    private Iface iface_;

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class log implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        log_args args = new log_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("log", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        log_result result = new log_result();
        iface_.log(args.aLog);
        oprot.writeMessageBegin(new TMessage("log", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class multiLog implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        multiLog_args args = new multiLog_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("multiLog", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        multiLog_result result = new multiLog_result();
        iface_.multiLog(args.aLog);
        oprot.writeMessageBegin(new TMessage("multiLog", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class logOneway implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        logOneway_args args = new logOneway_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("logOneway", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        iface_.logOneway(args.aLog);
        return;
      }
    }

    private class multiLogOneway implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        multiLogOneway_args args = new multiLogOneway_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("multiLogOneway", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        iface_.multiLogOneway(args.aLog);
        return;
      }
    }

    private class log2 implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        log2_args args = new log2_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("log2", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        log2_result result = new log2_result();
        iface_.log2(args.category, args.aLog);
        oprot.writeMessageBegin(new TMessage("log2", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class logOneway2 implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        logOneway2_args args = new logOneway2_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("logOneway2", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        iface_.logOneway2(args.category, args.aLog);
        return;
      }
    }

  }

  public static class log_args implements TBase<log_args, log_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("log_args");

    private static final TField A_LOG_FIELD_DESC = new TField("aLog", TType.STRING, (short)1);

    public String aLog;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      A_LOG((short)1, "aLog");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A_LOG
            return A_LOG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A_LOG, new FieldMetaData("aLog", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "TLog")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(log_args.class, metaDataMap);
    }

    public log_args() {
    }

    public log_args(
      String aLog)
    {
      this();
      this.aLog = aLog;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public log_args(log_args other) {
      if (other.isSetALog()) {
        this.aLog = other.aLog;
      }
    }

    public log_args deepCopy() {
      return new log_args(this);
    }

    @Override
    public void clear() {
      this.aLog = null;
    }

    public String getALog() {
      return this.aLog;
    }

    public log_args setALog(String aLog) {
      this.aLog = aLog;
      return this;
    }

    public void unsetALog() {
      this.aLog = null;
    }

    /** Returns true if field aLog is set (has been asigned a value) and false otherwise */
    public boolean isSetALog() {
      return this.aLog != null;
    }

    public void setALogIsSet(boolean value) {
      if (!value) {
        this.aLog = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A_LOG:
        if (value == null) {
          unsetALog();
        } else {
          setALog((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A_LOG:
        return getALog();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A_LOG:
        return isSetALog();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof log_args)
        return this.equals((log_args)that);
      return false;
    }

    public boolean equals(log_args that) {
      if (that == null)
        return false;

      boolean this_present_aLog = true && this.isSetALog();
      boolean that_present_aLog = true && that.isSetALog();
      if (this_present_aLog || that_present_aLog) {
        if (!(this_present_aLog && that_present_aLog))
          return false;
        if (!this.aLog.equals(that.aLog))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(log_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      log_args typedOther = (log_args)other;

      lastComparison = Boolean.valueOf(isSetALog()).compareTo(typedOther.isSetALog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetALog()) {
        lastComparison = TBaseHelper.compareTo(this.aLog, typedOther.aLog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // A_LOG
            if (field.type == TType.STRING) {
              this.aLog = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.aLog != null) {
        oprot.writeFieldBegin(A_LOG_FIELD_DESC);
        oprot.writeString(this.aLog);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("log_args(");
      boolean first = true;

      sb.append("aLog:");
      if (this.aLog == null) {
        sb.append("null");
      } else {
        sb.append(this.aLog);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class log_result implements TBase<log_result, log_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("log_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(log_result.class, metaDataMap);
    }

    public log_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public log_result(log_result other) {
    }

    public log_result deepCopy() {
      return new log_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof log_result)
        return this.equals((log_result)that);
      return false;
    }

    public boolean equals(log_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(log_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      log_result typedOther = (log_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("log_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class multiLog_args implements TBase<multiLog_args, multiLog_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("multiLog_args");

    private static final TField A_LOG_FIELD_DESC = new TField("aLog", TType.LIST, (short)1);

    public List<String> aLog;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      A_LOG((short)1, "aLog");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A_LOG
            return A_LOG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A_LOG, new FieldMetaData("aLog", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.LIST          , "TLogList")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(multiLog_args.class, metaDataMap);
    }

    public multiLog_args() {
    }

    public multiLog_args(
      List<String> aLog)
    {
      this();
      this.aLog = aLog;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiLog_args(multiLog_args other) {
      if (other.isSetALog()) {
        this.aLog = other.aLog;
      }
    }

    public multiLog_args deepCopy() {
      return new multiLog_args(this);
    }

    @Override
    public void clear() {
      this.aLog = null;
    }

    public int getALogSize() {
      return (this.aLog == null) ? 0 : this.aLog.size();
    }

    public java.util.Iterator<String> getALogIterator() {
      return (this.aLog == null) ? null : this.aLog.iterator();
    }

    public void addToALog(String elem) {
      if (this.aLog == null) {
        this.aLog = new ArrayList<String>();
      }
      this.aLog.add(elem);
    }

    public List<String> getALog() {
      return this.aLog;
    }

    public multiLog_args setALog(List<String> aLog) {
      this.aLog = aLog;
      return this;
    }

    public void unsetALog() {
      this.aLog = null;
    }

    /** Returns true if field aLog is set (has been asigned a value) and false otherwise */
    public boolean isSetALog() {
      return this.aLog != null;
    }

    public void setALogIsSet(boolean value) {
      if (!value) {
        this.aLog = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A_LOG:
        if (value == null) {
          unsetALog();
        } else {
          setALog((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A_LOG:
        return getALog();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A_LOG:
        return isSetALog();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiLog_args)
        return this.equals((multiLog_args)that);
      return false;
    }

    public boolean equals(multiLog_args that) {
      if (that == null)
        return false;

      boolean this_present_aLog = true && this.isSetALog();
      boolean that_present_aLog = true && that.isSetALog();
      if (this_present_aLog || that_present_aLog) {
        if (!(this_present_aLog && that_present_aLog))
          return false;
        if (!this.aLog.equals(that.aLog))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(multiLog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiLog_args typedOther = (multiLog_args)other;

      lastComparison = Boolean.valueOf(isSetALog()).compareTo(typedOther.isSetALog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetALog()) {
        lastComparison = TBaseHelper.compareTo(this.aLog, typedOther.aLog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // A_LOG
            if (field.type == TType.LIST) {
              {
                TList _list0 = iprot.readListBegin();
                this.aLog = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  this.aLog.add(_elem2);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.aLog != null) {
        oprot.writeFieldBegin(A_LOG_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.aLog.size()));
          for (String _iter3 : this.aLog)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiLog_args(");
      boolean first = true;

      sb.append("aLog:");
      if (this.aLog == null) {
        sb.append("null");
      } else {
        sb.append(this.aLog);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class multiLog_result implements TBase<multiLog_result, multiLog_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("multiLog_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(multiLog_result.class, metaDataMap);
    }

    public multiLog_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiLog_result(multiLog_result other) {
    }

    public multiLog_result deepCopy() {
      return new multiLog_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiLog_result)
        return this.equals((multiLog_result)that);
      return false;
    }

    public boolean equals(multiLog_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(multiLog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiLog_result typedOther = (multiLog_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiLog_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class logOneway_args implements TBase<logOneway_args, logOneway_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("logOneway_args");

    private static final TField A_LOG_FIELD_DESC = new TField("aLog", TType.STRING, (short)1);

    public String aLog;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      A_LOG((short)1, "aLog");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A_LOG
            return A_LOG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A_LOG, new FieldMetaData("aLog", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "TLog")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(logOneway_args.class, metaDataMap);
    }

    public logOneway_args() {
    }

    public logOneway_args(
      String aLog)
    {
      this();
      this.aLog = aLog;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logOneway_args(logOneway_args other) {
      if (other.isSetALog()) {
        this.aLog = other.aLog;
      }
    }

    public logOneway_args deepCopy() {
      return new logOneway_args(this);
    }

    @Override
    public void clear() {
      this.aLog = null;
    }

    public String getALog() {
      return this.aLog;
    }

    public logOneway_args setALog(String aLog) {
      this.aLog = aLog;
      return this;
    }

    public void unsetALog() {
      this.aLog = null;
    }

    /** Returns true if field aLog is set (has been asigned a value) and false otherwise */
    public boolean isSetALog() {
      return this.aLog != null;
    }

    public void setALogIsSet(boolean value) {
      if (!value) {
        this.aLog = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A_LOG:
        if (value == null) {
          unsetALog();
        } else {
          setALog((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A_LOG:
        return getALog();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A_LOG:
        return isSetALog();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logOneway_args)
        return this.equals((logOneway_args)that);
      return false;
    }

    public boolean equals(logOneway_args that) {
      if (that == null)
        return false;

      boolean this_present_aLog = true && this.isSetALog();
      boolean that_present_aLog = true && that.isSetALog();
      if (this_present_aLog || that_present_aLog) {
        if (!(this_present_aLog && that_present_aLog))
          return false;
        if (!this.aLog.equals(that.aLog))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(logOneway_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      logOneway_args typedOther = (logOneway_args)other;

      lastComparison = Boolean.valueOf(isSetALog()).compareTo(typedOther.isSetALog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetALog()) {
        lastComparison = TBaseHelper.compareTo(this.aLog, typedOther.aLog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // A_LOG
            if (field.type == TType.STRING) {
              this.aLog = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.aLog != null) {
        oprot.writeFieldBegin(A_LOG_FIELD_DESC);
        oprot.writeString(this.aLog);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("logOneway_args(");
      boolean first = true;

      sb.append("aLog:");
      if (this.aLog == null) {
        sb.append("null");
      } else {
        sb.append(this.aLog);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class multiLogOneway_args implements TBase<multiLogOneway_args, multiLogOneway_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("multiLogOneway_args");

    private static final TField A_LOG_FIELD_DESC = new TField("aLog", TType.LIST, (short)1);

    public List<String> aLog;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      A_LOG((short)1, "aLog");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A_LOG
            return A_LOG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A_LOG, new FieldMetaData("aLog", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.LIST          , "TLogList")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(multiLogOneway_args.class, metaDataMap);
    }

    public multiLogOneway_args() {
    }

    public multiLogOneway_args(
      List<String> aLog)
    {
      this();
      this.aLog = aLog;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiLogOneway_args(multiLogOneway_args other) {
      if (other.isSetALog()) {
        this.aLog = other.aLog;
      }
    }

    public multiLogOneway_args deepCopy() {
      return new multiLogOneway_args(this);
    }

    @Override
    public void clear() {
      this.aLog = null;
    }

    public int getALogSize() {
      return (this.aLog == null) ? 0 : this.aLog.size();
    }

    public java.util.Iterator<String> getALogIterator() {
      return (this.aLog == null) ? null : this.aLog.iterator();
    }

    public void addToALog(String elem) {
      if (this.aLog == null) {
        this.aLog = new ArrayList<String>();
      }
      this.aLog.add(elem);
    }

    public List<String> getALog() {
      return this.aLog;
    }

    public multiLogOneway_args setALog(List<String> aLog) {
      this.aLog = aLog;
      return this;
    }

    public void unsetALog() {
      this.aLog = null;
    }

    /** Returns true if field aLog is set (has been asigned a value) and false otherwise */
    public boolean isSetALog() {
      return this.aLog != null;
    }

    public void setALogIsSet(boolean value) {
      if (!value) {
        this.aLog = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A_LOG:
        if (value == null) {
          unsetALog();
        } else {
          setALog((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A_LOG:
        return getALog();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A_LOG:
        return isSetALog();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiLogOneway_args)
        return this.equals((multiLogOneway_args)that);
      return false;
    }

    public boolean equals(multiLogOneway_args that) {
      if (that == null)
        return false;

      boolean this_present_aLog = true && this.isSetALog();
      boolean that_present_aLog = true && that.isSetALog();
      if (this_present_aLog || that_present_aLog) {
        if (!(this_present_aLog && that_present_aLog))
          return false;
        if (!this.aLog.equals(that.aLog))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(multiLogOneway_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiLogOneway_args typedOther = (multiLogOneway_args)other;

      lastComparison = Boolean.valueOf(isSetALog()).compareTo(typedOther.isSetALog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetALog()) {
        lastComparison = TBaseHelper.compareTo(this.aLog, typedOther.aLog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // A_LOG
            if (field.type == TType.LIST) {
              {
                TList _list4 = iprot.readListBegin();
                this.aLog = new ArrayList<String>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  String _elem6;
                  _elem6 = iprot.readString();
                  this.aLog.add(_elem6);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.aLog != null) {
        oprot.writeFieldBegin(A_LOG_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.aLog.size()));
          for (String _iter7 : this.aLog)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiLogOneway_args(");
      boolean first = true;

      sb.append("aLog:");
      if (this.aLog == null) {
        sb.append("null");
      } else {
        sb.append(this.aLog);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class log2_args implements TBase<log2_args, log2_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("log2_args");

    private static final TField CATEGORY_FIELD_DESC = new TField("category", TType.STRING, (short)1);
    private static final TField A_LOG_FIELD_DESC = new TField("aLog", TType.STRING, (short)21);

    public String category;
    public String aLog;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      CATEGORY((short)1, "category"),
      A_LOG((short)21, "aLog");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY
            return CATEGORY;
          case 21: // A_LOG
            return A_LOG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY, new FieldMetaData("category", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.A_LOG, new FieldMetaData("aLog", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "TLog")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(log2_args.class, metaDataMap);
    }

    public log2_args() {
    }

    public log2_args(
      String category,
      String aLog)
    {
      this();
      this.category = category;
      this.aLog = aLog;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public log2_args(log2_args other) {
      if (other.isSetCategory()) {
        this.category = other.category;
      }
      if (other.isSetALog()) {
        this.aLog = other.aLog;
      }
    }

    public log2_args deepCopy() {
      return new log2_args(this);
    }

    @Override
    public void clear() {
      this.category = null;
      this.aLog = null;
    }

    public String getCategory() {
      return this.category;
    }

    public log2_args setCategory(String category) {
      this.category = category;
      return this;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been asigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public String getALog() {
      return this.aLog;
    }

    public log2_args setALog(String aLog) {
      this.aLog = aLog;
      return this;
    }

    public void unsetALog() {
      this.aLog = null;
    }

    /** Returns true if field aLog is set (has been asigned a value) and false otherwise */
    public boolean isSetALog() {
      return this.aLog != null;
    }

    public void setALogIsSet(boolean value) {
      if (!value) {
        this.aLog = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          setCategory((String)value);
        }
        break;

      case A_LOG:
        if (value == null) {
          unsetALog();
        } else {
          setALog((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY:
        return getCategory();

      case A_LOG:
        return getALog();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY:
        return isSetCategory();
      case A_LOG:
        return isSetALog();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof log2_args)
        return this.equals((log2_args)that);
      return false;
    }

    public boolean equals(log2_args that) {
      if (that == null)
        return false;

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      boolean this_present_aLog = true && this.isSetALog();
      boolean that_present_aLog = true && that.isSetALog();
      if (this_present_aLog || that_present_aLog) {
        if (!(this_present_aLog && that_present_aLog))
          return false;
        if (!this.aLog.equals(that.aLog))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(log2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      log2_args typedOther = (log2_args)other;

      lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = TBaseHelper.compareTo(this.category, typedOther.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetALog()).compareTo(typedOther.isSetALog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetALog()) {
        lastComparison = TBaseHelper.compareTo(this.aLog, typedOther.aLog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CATEGORY
            if (field.type == TType.STRING) {
              this.category = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 21: // A_LOG
            if (field.type == TType.STRING) {
              this.aLog = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(this.category);
        oprot.writeFieldEnd();
      }
      if (this.aLog != null) {
        oprot.writeFieldBegin(A_LOG_FIELD_DESC);
        oprot.writeString(this.aLog);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("log2_args(");
      boolean first = true;

      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aLog:");
      if (this.aLog == null) {
        sb.append("null");
      } else {
        sb.append(this.aLog);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class log2_result implements TBase<log2_result, log2_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("log2_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(log2_result.class, metaDataMap);
    }

    public log2_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public log2_result(log2_result other) {
    }

    public log2_result deepCopy() {
      return new log2_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof log2_result)
        return this.equals((log2_result)that);
      return false;
    }

    public boolean equals(log2_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(log2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      log2_result typedOther = (log2_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("log2_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class logOneway2_args implements TBase<logOneway2_args, logOneway2_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("logOneway2_args");

    private static final TField CATEGORY_FIELD_DESC = new TField("category", TType.STRING, (short)1);
    private static final TField A_LOG_FIELD_DESC = new TField("aLog", TType.STRING, (short)2);

    public String category;
    public String aLog;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      CATEGORY((short)1, "category"),
      A_LOG((short)2, "aLog");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY
            return CATEGORY;
          case 2: // A_LOG
            return A_LOG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY, new FieldMetaData("category", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.A_LOG, new FieldMetaData("aLog", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "TLog")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(logOneway2_args.class, metaDataMap);
    }

    public logOneway2_args() {
    }

    public logOneway2_args(
      String category,
      String aLog)
    {
      this();
      this.category = category;
      this.aLog = aLog;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logOneway2_args(logOneway2_args other) {
      if (other.isSetCategory()) {
        this.category = other.category;
      }
      if (other.isSetALog()) {
        this.aLog = other.aLog;
      }
    }

    public logOneway2_args deepCopy() {
      return new logOneway2_args(this);
    }

    @Override
    public void clear() {
      this.category = null;
      this.aLog = null;
    }

    public String getCategory() {
      return this.category;
    }

    public logOneway2_args setCategory(String category) {
      this.category = category;
      return this;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been asigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public String getALog() {
      return this.aLog;
    }

    public logOneway2_args setALog(String aLog) {
      this.aLog = aLog;
      return this;
    }

    public void unsetALog() {
      this.aLog = null;
    }

    /** Returns true if field aLog is set (has been asigned a value) and false otherwise */
    public boolean isSetALog() {
      return this.aLog != null;
    }

    public void setALogIsSet(boolean value) {
      if (!value) {
        this.aLog = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          setCategory((String)value);
        }
        break;

      case A_LOG:
        if (value == null) {
          unsetALog();
        } else {
          setALog((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY:
        return getCategory();

      case A_LOG:
        return getALog();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY:
        return isSetCategory();
      case A_LOG:
        return isSetALog();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logOneway2_args)
        return this.equals((logOneway2_args)that);
      return false;
    }

    public boolean equals(logOneway2_args that) {
      if (that == null)
        return false;

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      boolean this_present_aLog = true && this.isSetALog();
      boolean that_present_aLog = true && that.isSetALog();
      if (this_present_aLog || that_present_aLog) {
        if (!(this_present_aLog && that_present_aLog))
          return false;
        if (!this.aLog.equals(that.aLog))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(logOneway2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      logOneway2_args typedOther = (logOneway2_args)other;

      lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = TBaseHelper.compareTo(this.category, typedOther.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetALog()).compareTo(typedOther.isSetALog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetALog()) {
        lastComparison = TBaseHelper.compareTo(this.aLog, typedOther.aLog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CATEGORY
            if (field.type == TType.STRING) {
              this.category = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // A_LOG
            if (field.type == TType.STRING) {
              this.aLog = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(this.category);
        oprot.writeFieldEnd();
      }
      if (this.aLog != null) {
        oprot.writeFieldBegin(A_LOG_FIELD_DESC);
        oprot.writeString(this.aLog);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("logOneway2_args(");
      boolean first = true;

      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aLog:");
      if (this.aLog == null) {
        sb.append("null");
      } else {
        sb.append(this.aLog);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
